{"version":3,"sources":["YouCaptcha/CaptchaView.js","YouCaptcha/CaptchaHeaderView.js","YouCaptcha/InvisibleCaptchaView.js","YouCaptcha/HeaderView.js","YouCaptcha/YouCaptchaApp.js","LoginModal.js","App.js","serviceWorker.js","index.js"],"names":["GET_CAPTCHAS","gql","CaptchaView","props","useQuery","variables","id","captchaId","errorPolicy","loading","error","data","refetch","useState","selected","setSelected","refreshing","setRefreshing","toggleSelection","candidate_id","new_selected","console","log","slice","verifyCaptcha","selectedIds","i","push","targetCaptcha","refreshCaptcha","setTimeout","Row","className","Button","variant","onClick","style","textAlign","paddingLeft","icon","faSyncAlt","cursor","marginLeft","marginRight","showEmptyMessage","showWrongMessage","aria-controls","aria-expanded","showCaptcha","src","candidates","CaptchaHeaderView","showAd","setShowAd","originImgLoad","setOriginImgLoad","useEffect","success","origin","Image","onload","result","width","question","height","zIndex","version","xmlns","viewBox","display","fill","stroke","strokeWidth","strokeLinecap","strokeMiterlimit","points","cx","cy","r","fillOpacity","Fade","in","visibility","flatData","decodeURIComponent","split","pop","substr","name","size","href","target","rel","closeAd","InvisibleCaptchaView","checkAnimation","setCheckAnimation","Spinner","animation","role","toggleCaptcha","color","borderRadius","HeaderView","finish","status","YouCaptchaApp","firstLoad","setFirstLoad","setShowCaptcha","verified","setVerified","setShowWrongMessage","setShowEmptyMessage","startCaptcha","setStartCaptcha","fetchData","setFetchData","setCaptchaId","captchaAnswer","setCaptchaAnswer","type","answer","onCompleted","toggleShowCaptcha","title","length","substring","onSuccess","graphQLErrors","map","message","key","Collapse","newCaptchaId","captchaIdList","Math","floor","random","LoginModal","state","empty","wrong","captchaVerified","handleClick","bind","otherCaptchaSuccess","recaptchaCheck","this","captchaType","minHeight","onVerify","captchaSuccess","closeDialog","userLogin","setState","e","preventDefault","captcha","captchaEnter","value","click","React","Component","App","cookies","document","testId","get","targetCategory","targetProductId","controlProductId","productIdToCaptchaId","navbarToggle","showCategoryNav","showLogin","username","password","usernameValid","passwordValid","productsInCart","showProductDetail","curProduct","showSuccessDialog","redirect","wrongPassword","handlePasswordChange","handleUserNameChange","handleNavbarToggle","userLogout","closeProductDetailDialog","showProduct","toggleCategoryNav","addBrowsedProducts","nextTest","updateCart","showDialog","validateAccount","targetProductData","Alert","position","left","faCheck","Modal","dialogClassName","show","onHide","centered","Header","closeButton","Title","Body","overflowY","maxHeight","maxWidth","overflow","url","prevState","index","set","JSON","stringify","splice","product","captchaPass","text","accountsData","withCookies","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c6251ec6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Container, Row, Col, Button, Alert } from 'react-bootstrap';\nimport { useQuery } from 'react-apollo';\nimport { gql } from \"apollo-boost\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSyncAlt } from '@fortawesome/free-solid-svg-icons'\n\nimport './CaptchaView.css';\n\nconst GET_CAPTCHAS = gql`\n  query Captchas($id: Int!) {\n    targetCaptcha(id: $id) {\n      id,\n      question,\n      candidates\n    }\n  }\n`;\n\nfunction CaptchaView(props) {\n    // const { loading, error, data, refetch} = useQuery(GET_CAPTCHAS);\n    const { loading, error, data, refetch } = useQuery(\n        GET_CAPTCHAS,{\n          variables: {\n            id: props.captchaId,\n          },\n          errorPolicy: 'all'\n        }\n    );\n    const [selected, setSelected] = useState([false, false, false, false, false, false, false, false, false]);\n    const [captchaUrls, setCaptchaUrls] = useState([\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"]);\n    const [refreshing, setRefreshing] = useState(false);\n\n    const toggleSelection = (candidate_id) => {\n        let new_selected = selected;\n        console.log(new_selected);\n        new_selected[candidate_id] = !new_selected[candidate_id];\n        console.log(new_selected);\n        setSelected(new_selected.slice());\n    }\n\n    const verifyCaptcha = () => {\n        let selectedIds = [];\n        for(var i=0; i<9; i++){\n            if(selected[i]){\n                selectedIds.push(i);\n            }\n        }\n        props.verifyCaptcha(data.targetCaptcha.id, selectedIds);\n    }\n\n    const refreshCaptcha = () => {\n        setRefreshing(true)\n        setSelected([false, false, false, false, false, false, false, false, false]);\n        props.refreshCaptcha()\n        // refetch(0).then(()=>{\n        //     setRefreshing(false)\n        // })\n        setTimeout(()=>{\n            setRefreshing(false)\n        }, 500)\n    }\n    if(error){\n        return(\n            <div>\n                error...\n            </div>\n        )\n    }\n    if(loading){\n        return(\n            <div id=\"captchaBody\">\n            <Row className=\"captcha-row\">\n                <div className=\"youcaptcha-img-div\"></div>\n                <div className=\"youcaptcha-img-div\"></div>\n                <div className=\"youcaptcha-img-div\"></div>\n            </Row>\n            <Row className=\"captcha-row\">\n                <div className=\"youcaptcha-img-div\"></div>\n                <div className=\"youcaptcha-img-div\"></div>\n                <div className=\"youcaptcha-img-div\"></div>\n            </Row>\n            <Row className=\"captcha-row\">\n                <div className=\"youcaptcha-img-div\"></div>\n                <div className=\"youcaptcha-img-div\"></div>\n                <div className=\"youcaptcha-img-div\"></div>\n            </Row>\n            <Row className=\"captcha-row ending align-items-center px-2\">\n                <Button variant=\"white\" className=\"text-muted cell\" onClick={refreshCaptcha/*this.props.getCaptcha*/} \n                    style={{textAlign:\"left\", paddingLeft:\"0\"}}>\n                    {/* <i className=\"fas fa-sync-alt\"></i> */}\n                    <FontAwesomeIcon icon={faSyncAlt} className={refreshing?\"rotating\":\"\"} style={{cursor: \"pointer\", marginLeft:\"8px\", marginRight:\"8px\"}} />\n                </Button>\n                <div className=\"captcha-error\">\n                    {\n                        props.showEmptyMessage && \n                        <span className=\"text-danger\">請完成必要欄位</span>\n                    }\n                    {\n                        props.showWrongMessage && \n                        <span className=\"text-danger\">請再試一次</span>\n                    }\n                </div>\n                <div className=\"cell\" style={{textAlign:\"right\"}}>\n                    <Button variant=\"primary\" onClick={() => {verifyCaptcha()}}\n                    // <Button variant=\"primary\" onClick={() => {props.toggleShowCaptcha()}}\n                        aria-controls=\"youcaptcha-collpase\"\n                        aria-expanded={props.showCaptcha}>\n                        登入\n                    </Button>\n                </div>\n            </Row>\n            </div>\n        )\n    }\n    return (\n        <div id=\"captchaBody\">\n        <Row className=\"captcha-row\">\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha1\" className={selected[0]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[0] + \"\"} onClick={() => {toggleSelection(0)}/*this.props.selectCaptcha(1)*/}/>\n            </div>\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha2\" className={selected[1]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[1] + \"\"} onClick={() => {toggleSelection(1)}/*this.props.selectCaptcha(2)*/}/>\n            </div>\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha3\" className={selected[2]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[2] + \"\"} onClick={() => {toggleSelection(2)}/*this.props.selectCaptcha(3)*/}/>\n            </div>\n        </Row>\n        <Row className=\"captcha-row\">\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha4\" className={selected[3]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[3] + \"\"} onClick={() => {toggleSelection(3)}/*this.props.selectCaptcha(4)*/}/>\n            </div>\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha5\" className={selected[4]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[4] + \"\"} onClick={() => {toggleSelection(4)}/*this.props.selectCaptcha(5)*/}/>\n            </div>\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha6\" className={selected[5]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[5] + \"\"} onClick={() => {toggleSelection(5)}/*this.props.selectCaptcha(6)*/}/>\n            </div>\n        </Row>\n        <Row className=\"captcha-row\">\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha7\" className={selected[6]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[6] + \"\"} onClick={() => {toggleSelection(6)}/*this.props.selectCaptcha(7)*/}/>\n            </div>\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha8\" className={selected[7]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[7] + \"\"} onClick={() => {toggleSelection(7)}/*this.props.selectCaptcha(8)*/}/>\n            </div>\n            <div className=\"youcaptcha-img-div\">\n                <img id=\"captcha9\" className={selected[8]? \"selected youcaptcha-img\": \"youcaptcha-img\"} src={data.targetCaptcha.candidates[8] + \"\"} onClick={() => {toggleSelection(8)}/*this.props.selectCaptcha(9)*/}/>\n            </div>\n        </Row>\n        <Row className=\"captcha-row ending align-items-center px-2\">\n            <Button variant=\"white\" className=\"text-muted cell\" onClick={refreshCaptcha/*this.props.getCaptcha*/} \n                style={{textAlign:\"left\", paddingLeft:\"0\"}}>\n                {/* <i className=\"fas fa-sync-alt\"></i> */}\n                <FontAwesomeIcon icon={faSyncAlt} className={refreshing?\"rotating\":\"\"} style={{cursor: \"pointer\", marginLeft:\"8px\", marginRight:\"8px\"}} />\n            </Button>\n            <div className=\"captcha-error\">\n                {\n                    props.showEmptyMessage && \n                    <span className=\"text-danger\">請完成必要欄位</span>\n                }\n                {\n                    props.showWrongMessage && \n                    <span className=\"text-danger\">請再試一次</span>\n                }\n            </div>\n            <div className=\"cell\" style={{textAlign:\"right\"}}>\n                <Button variant=\"primary\" onClick={() => {verifyCaptcha()}}\n                // <Button variant=\"primary\" onClick={() => {props.toggleShowCaptcha()}}\n                    aria-controls=\"youcaptcha-collpase\"\n                    aria-expanded={props.showCaptcha}>\n                    登入\n                </Button>\n            </div>\n        </Row>\n        </div>\n    );\n}\n\nexport default CaptchaView;","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col, Button, Fade } from 'react-bootstrap';\nimport { useQuery } from 'react-apollo';\nimport { gql } from \"apollo-boost\";\nimport './CaptchaView.css';\nimport './CaptchaHeaderView.css'\n\nimport flatData from '../data/flat_products_list_zh.json';\n\nconst GET_CAPTCHAS = gql`\n  query Captchas($id: Int!) {\n    targetCaptcha(id: $id) {\n      id,\n      question,\n      candidates\n    }\n  }\n`;\n\nfunction CaptchaHeaderView(props) {\n    const [showAd, setShowAd] = useState(false);\n    const [originImgLoad, setOriginImgLoad] = useState(false);\n\n    // const { loading, error, data } = useQuery(GET_CAPTCHAS);\n    const { loading, error, data, refetch } = useQuery(\n        GET_CAPTCHAS,{\n          variables: {\n            id: props.captchaId,\n          },\n          errorPolicy: 'all'\n        }\n    );\n\n    useEffect(() => {\n        if(props.success && !showAd){\n            let origin = new Image()\n            origin.onload = () => {\n                setOriginImgLoad(true);\n            }\n            origin.src = props.result.origin\n            setTimeout(() => {\n                setShowAd(true);\n            }, 1200);\n        }\n      }, [props.success]);\n\n    if(error){\n        return (\n            <div>error</div>\n        )\n    }\n\n    return (\n        <> \n        <Row className={(showAd&&originImgLoad)?\"my-4 captcha-row\":\"title captcha-row\"}>\n            <div className={\"youcaptcha-image-container\"} style={{width: \"110px\"}}>\n                <div className={(props.success&&originImgLoad)? \"youcaptcha-slide\" : \"youcaptcha-hide\"} >\n                    <img className={(props.success&&originImgLoad)? \"youcaptcha-slide-img\" : \"youcaptcha-hide\"} src={props.result.origin} />\n                </div>\n                <img className={(props.success&&originImgLoad)? \"slideFade\" : \"youcaptcha-img\"} src={loading? \"\": data.targetCaptcha.question} />\n                <div className={props.success? \"check-shift\" : \"\"} style={{width: \"100px\", height: \"100px\", zIndex: \"2000\"}}>\n                    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 130.2 130.2\" style={{display: props.success? \"inline-block\": \"none\", zIndex:\"2000\"}}>\n                        <polyline className={props.success? \"path check\" : \"\"} fill=\"none\" stroke=\"#73AF55\" strokeWidth=\"10\" strokeLinecap=\"square\" strokeMiterlimit=\"10\" points=\"100.2,40.2 51.5,88.8 29.8,67.5 \"/>\n                        <circle className={props.success? \"path circle\" : \"\"} cx=\"60\" cy=\"62\" r=\"50\" stroke=\"#73AF55\" strokeWidth=\"10\" strokeLinecap=\"square\" strokeMiterlimit=\"10\" fillOpacity=\"0\" />\n                    </svg>  \n                    {/* <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 130.2 130.2\" style={{display: props.success? \"inline-block\": \"none\", zIndex:\"200\"}}>\n                        <polyline className={props.success? \"path check\" : \"\"} fill=\"none\" stroke=\"#73AF55\" strokeWidth=\"10\" strokeLinecap=\"square\" strokeMiterlimit=\"10\" points=\"100.2,40.2 51.5,88.8 29.8,67.5 \"/>\n                        <circle className={props.success? \"path circle\" : \"\"} cx=\"50\" cy=\"50\" r=\"45\" stroke=\"#73AF55\" stroke-width=\"10\" strokeLinecap=\"square\" strokeMiterlimit=\"10\" fill-opacity=\"0\" />\n                    </svg>   */}\n                    {/* <svg style={{width: \"100px\", height: \"100px\", zIndex: \"200\"}}>\n                        <circle class=\"circle\" cx=\"50\" cy=\"50\" r=\"45\" stroke=\"#231f20\" stroke-width=\"10\" fill-opacity=\"0\" />\n                    </svg> */}\n                </div>\n            </div>\n            {/* {!showAd } */}\n            <Fade in={!props.success} style={{visibility: showAd?\"hidden\":\"visible\"}}>\n                <div className=\"youcaptcha-description\">\n                    <h5>請從九宮格中，選出所有與左圖包含相同的物品的圖片</h5>\n                </div>\n            </Fade>\n            {\n                showAd &&\n                <div className=\"youcaptcha-ad fadeIn\" >\n                    <div className=\"youcaptcha-ad-text my-2\">\n                        <h4>{flatData[decodeURIComponent(props.result.origin).split(\"/\").pop().substr(0,10)].name}</h4>\n                    </div>\n                    <div>\n                        <Button className=\"mx-1\" style={{width: \"7.5rem\"}} size=\"lg\" href={\"http://localhost:3000/Product?p=\" + decodeURIComponent(props.result.origin).split(\"/\").pop().substr(0,10)}>去看看</Button>\n                        <Button variant={\"secondary\"} className=\"mx-1\" style={{width: \"7.5rem\"}} size=\"lg\" target=\"_blank\" rel=\"noopener noreferrer\" href={\"\"} onClick={props.closeAd}>略過</Button>\n                    </div>\n                </div>\n            }\n        </Row>\n        {/* <Row style={{display: this.props.captcha.finish? \"block\": \"none\", maxWidth: \"360px\"}}>\n            <Alert variant={this.props.captcha.success? \"success\": \"danger\"}>\n                {this.props.captcha.success? \"success\": \"fail\"}\n            </Alert>         \n        </Row> */}\n        </>\n    );\n\n}\n\nexport default CaptchaHeaderView;","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Row, Col, Button, Spinner } from 'react-bootstrap';\nimport { useQuery } from 'react-apollo';\nimport { gql } from \"apollo-boost\";\nimport './InvisibleCaptchaView.css';\n\nconst GET_CAPTCHAS = gql`\n  query Captchas($id: Int!) {\n    targetCaptcha(id: $id) {\n      id,\n      question,\n      candidates\n    }\n  }\n`;\n\nfunction InvisibleCaptchaView(props) {\n    const [checkAnimation, setCheckAnimation] = useState(false);\n\n    // const { loading, error, data } = useQuery(GET_CAPTCHAS);\n    const { loading, error, data, refetch } = useQuery(\n        GET_CAPTCHAS,{\n          variables: {\n            id: props.captchaId,\n          },\n          errorPolicy: 'all'\n        }\n    );\n    \n    if(loading){\n        return(\n            <div>\n                loading...\n            </div>\n        )\n    }\n    if(error){\n        return(\n            <div>\n                error...\n            </div>\n        )\n    }\n    return (\n        <>\n        <Row className=\"mt-3 mb-2 captcha-row justify-content-between align-items-center text-left\">\n            <div className=\"d-flex align-items-center\">\n                <div className=\"checkbox-container\">\n                    {checkAnimation?\n                    <Spinner className=\"youcaptcha-spinner\" animation=\"border\" role=\"status\" variant=\"primary\">\n                        <span className=\"sr-only\">Loading...</span>\n                    </Spinner>:\n                    <div className=\"youcaptcha-checkbox\"\n                        // onClick={this.props.toggleCaptcha}\n                        onClick={() => {\n                            setCheckAnimation(true); \n                            setTimeout(() => {\n                                props.toggleCaptcha();\n                            }, 1000);\n                        }/*this.props.checkCaptcha*/}\n                        style={{display: /*this.props.captcha.success? \"none\": */\"block\"}}\n                        aria-controls=\"captchaBody\"\n                        aria-expanded={false/*this.props.captcha.start*/}\n                    />\n                    }\n                    <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 130.2 130.2\" style={{display: /*this.props.captcha.success? \"inline-block\":*/ \"none\"}}>\n                        {/* <circle className=\"path circle\" fill=\"none\" stroke=\"#73AF55\" strokeWidth=\"6\" strokeMiterlimit=\"10\" cx=\"65.1\" cy=\"65.1\" r=\"62.1\"/> */}\n                        {/* <polyline className={this.props.captcha.success? \"path check\" : \"\"} fill=\"none\" stroke=\"#73AF55\" strokeWidth=\"10\" strokeLinecap=\"round\" strokeMiterlimit=\"10\" points=\"100.2,40.2 51.5,88.8 29.8,67.5 \"/> */}\n                    </svg>\n                </div>\n                {/* <span className=\"ml-2\">I'm not a robot</span> */}\n                <span className=\"ml-2\">我不是機器人</span>\n            </div>\n            <div className=\"sponser\">\n                {/* <span className=\"small-text\">YouCaptcha</span> */}\n                {/* <img src={icon} width=\"40px\" height=\"40px\"/> */}\n                <span className=\"small-text\" style={{color:\"gray\", marginLeft:\"5px\"}}>YouCaptcha</span>\n                <div>\n                    <img className={/*this.props.captcha.success? \"\" :*/ \"\"} src={data.targetCaptcha.question} width=\"40px\" height=\"40px\" style={{borderRadius: \"2px\"}}/> \n                    <img className={/*this.props.captcha.success? \"slideFade2\" :*/ \"\"} src={data.targetCaptcha.question} width=\"40px\" height=\"40px\" style={{borderRadius: \"2px\"}}/>\n                </div>\n                {/* <span className=\"small-text\" style={{visibility: \"hidden\"}}>YouCaptcha</span> */}\n                <span className=\"small-text text-secondary\"><a className=\"text-\" href=\"#\">Privacy</a> - <a className=\"text-\" href=\"#\">Terms</a></span>\n            </div>\n        </Row>\n        <Row className=\"mb-2 captcha-row\">\n            {/* <span className=\"small-text\"><a href=\"#\">Privacy</a> - <a href=\"#\">Terms</a></span> */}\n        </Row>\n        </>\n    );\n}\n\nexport default InvisibleCaptchaView;","import React from 'react';\nimport CaptchaHeaderView from './CaptchaHeaderView'\nimport InvisibleCaptchaView from './InvisibleCaptchaView'\nimport './CaptchaView.css';\n\nfunction HeaderView(props) {\n\n    if (!props.showCaptcha)\n        return (\n            <InvisibleCaptchaView captchaId={props.captchaId} toggleCaptcha={props.toggleCaptcha} showAd={props.showAd}/>\n        );\n    else \n        return (\n            <CaptchaHeaderView captchaId={props.captchaId} finish={false} success={props.result.status != \"incorrect\"} result={props.result} showAd={props.showAd} closeAd={props.closeAd}/>\n        );\n}\n\nexport default HeaderView;","import React, { useState, useEffect } from 'react';\nimport { Container, Collapse, Row, Button } from 'react-bootstrap';\nimport CaptchaView from './CaptchaView.js'\nimport HeaderView from './HeaderView.js'\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider, Query, Mutation, useQuery } from 'react-apollo';\nimport { gql } from \"apollo-boost\";\nimport './YouCaptchaApp.css';\n\nconst GET_CAPTCHAS = gql`\n  query Captchas($id: Int!, $type: String!, $answer: [Int]) {\n    result(id: $id, type: $type, answer: $answer){\n      status\n      title\n      origin\n    }\n  }\n`;\n\nfunction YouCaptchaApp(props) {\n  const [firstLoad, setFirstLoad] = useState(true);\n  const [showCaptcha, setShowCaptcha] = useState(false);\n  const [showAd, setShowAd] = useState(false);\n  const [verified, setVerified] = useState(false);\n  const [showWrongMessage, setShowWrongMessage] = useState(false);\n  const [showEmptyMessage, setShowEmptyMessage] = useState(false);\n  const [startCaptcha, setStartCaptcha] = useState(false);\n  const [fetchData, setFetchData] = useState({result: {status: \"incorrect\"}});\n  const [captchaId, setCaptchaId] = useState(props.captchaId);\n  const [captchaAnswer, setCaptchaAnswer] = useState([]);\n  const defaultResult = {\n    status: \"incorrect\",\n    origin: \"\",\n    title: \"\"\n  }\n\n  const { loading, error, data, refetch } = useQuery(\n    GET_CAPTCHAS,{\n      variables: {\n        id: captchaId,\n        type: \"\",\n        answer: captchaAnswer\n      },\n      errorPolicy: 'all',\n      onCompleted: ()=>{\n        console.log('hahaha')\n        if(firstLoad){\n          setFirstLoad(false);\n        }\n        else{\n          if(data.result.status === \"incorrect\"){\n            setShowEmptyMessage(false)\n            setShowWrongMessage(true)\n          }\n        }\n      }\n    }\n  );\n\n  const toggleCaptcha = () => {\n    setShowCaptcha(!showCaptcha);\n    if(!startCaptcha){\n      setStartCaptcha(true);\n    }\n  }\n\n  const verifyCaptcha = (id, answer) => {\n    if(props.onSuccess()){\n      setCaptchaId(id);\n      setCaptchaAnswer(answer.slice());\n      if(answer.length == 0){\n        setShowEmptyMessage(false)\n        setShowWrongMessage(true)\n      }\n    }\n    else{\n      setShowWrongMessage(false)\n      setShowEmptyMessage(true)\n    }\n  }\n\n  const toggleShowCaptcha = () => {\n    setTimeout(()=>{\n      setShowCaptcha(!showCaptcha)\n    }, 180)\n  }\n\n  const refreshCaptcha = () => {\n    console.log(\"refreshCaptcha QWQ\")\n    setFirstLoad(true)\n    let newCaptchaId = props.captchaIdList[Math.floor(Math.random() * props.captchaIdList.length)];\n    console.log(newCaptchaId)\n    setCaptchaId(newCaptchaId)\n  }\n\n  useEffect(() => {\n    if(!loading && !error){\n      if(data.result.title.length > 50){\n        data.result.title = data.result.title.substring(0,50) + \"...\";\n      }\n      console.log(data)\n      if(data.result.status != \"incorrect\"){\n        if(props.onSuccess(true)){\n          setShowWrongMessage(false)\n          setShowEmptyMessage(false)\n          // setShowCaptcha(false)\n          toggleShowCaptcha()\n          setFirstLoad(true)\n          setFetchData(data)\n          setVerified(true)\n          setShowAd(true)\n        }\n        else {\n          setShowWrongMessage(false)\n          setShowEmptyMessage(true)\n        }\n      }\n      else{ // incorrect\n        if(!firstLoad){\n          setShowEmptyMessage(false)\n          setShowWrongMessage(true)\n        }\n      }\n    }\n  }, [data]);\n\n  if(error){\n      return(\n        <div>error...App\n          <pre>Bad: {error.graphQLErrors.map(({ message }, i) => (\n            <span key={i}>{message}</span>\n          ))}\n          </pre>\n        </div>\n      )\n  }\n\n  return (\n    <div className=\"App\">\n      <div id=\"demo\" className={showAd? \"completed\": \"device px-4\"} style={{display: \"block\"}}>\n        <HeaderView captchaId={captchaId} toggleCaptcha={toggleCaptcha} showCaptcha={startCaptcha} result={loading? defaultResult: fetchData.result} showAd={showAd} verified={verified} closeAd={props.closeAd}/>\n        <Collapse in={showCaptcha}>\n          <div id=\"youcaptcha-collpase\">\n            <CaptchaView captchaId={captchaId} showWrongMessage={showWrongMessage} showEmptyMessage={showEmptyMessage} \n            verifyCaptcha={verifyCaptcha} verified={verified} showCaptcha={showCaptcha} toggleShowCaptcha={toggleShowCaptcha} refreshCaptcha={refreshCaptcha}/>\n          </div>\n        </Collapse>\n      </div>\n    </div>\n  );\n}\n\nexport default YouCaptchaApp;\n","import React from 'react';\nimport './App.css';\n\nimport {withRouter} from 'react-router-dom'\nimport { Modal, InputGroup, Form, FormControl,Button } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faEye, faEyeSlash, faSyncAlt } from '@fortawesome/free-solid-svg-icons'\nimport YouCaptchaApp from './YouCaptcha/YouCaptchaApp'\n\nclass LoginModal extends React.Component {\n  \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            empty: false,\n            wrong: false,\n            captchaVerified: false,\n        }\n\n        this.handleClick = this.handleClick.bind(this)\n        this.otherCaptchaSuccess = this.otherCaptchaSuccess.bind(this)\n        this.recaptchaCheck = this.recaptchaCheck.bind(this)\n    }\n  \n    render (){\n        return (\n            <div className={(this.props.captchaVerified && this.props.captchaType == \"YouCaptcha\")?\"ww-50 scale\":\"ww-50\"} style={{minHeight: this.props.captchaType == \"YouCaptcha\"? this.props.captchaVerified? \"160px\" :\"120px\":\"80px\"}}>\n                {this.props.captchaType == \"YouCaptcha\" && \n                    <YouCaptchaApp captchaId={this.props.captchaId} captchaIdList={this.props.captchaIdList} onVerify={() => {}} onSuccess={this.props.captchaSuccess} closeAd={this.props.closeDialog}/>}\n                <div className=\"justify-content-center mt-3\" style={{display: (this.props.captchaVerified && this.props.captchaType == \"ReCaptcha\")? \"flex\": \"none\"}}>\n                    {\n                        <Button className=\"px-2 w-25\" onClick={this.props.userLogin}>{('Login Your Account')}</Button>\n                    }\n                </div>\n            </div>\n        );\n    }\n    \n    otherCaptchaSuccess(){\n        if(this.props.captchaSuccess(true)){\n            if(this.props.captchaType !== \"YouCaptcha\"){\n                this.setState({\n                    captchaVerified: true\n                })\n            }\n        }\n    }\n\n    handleClick(e) {\n        e.preventDefault();\n        if(!this.props.captchaSuccess()){\n            this.setState({\n                empty: true\n            })\n            return\n        }\n        else{\n            this.setState({\n                empty: false\n            })\n        }\n        if(this.props.captcha === this.captchaEnter.value){\n            this.setState({\n                empty: false,\n                wrong: false\n            })\n            this.props.handleClick(e)\n        }\n        else{\n            this.setState({\n                empty: false,\n                wrong: true\n            })\n        }\n    }\n\n    recaptchaCheck(click = true) {\n        if(click){\n            this.setState({\n                empty: !this.props.captchaSuccess()\n            })\n        }\n    }\n}\n\nexport default LoginModal","import React from 'react';\nimport './App.css';\nimport data from './data/metadata_all_with_detail_img_3_empty.json';\nimport productIdToCaptchaId from './data/productIdToCaptchaId.json'\nimport flatData from './data/flat_products_list_zh.json';\nimport accountsData from './data/accounts.json';\n\nimport LoginModal from './LoginModal'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Link\n} from 'react-router-dom'\nimport { withCookies, Cookies } from 'react-cookie';\nimport { Col, Alert, Container, Row, Nav, Navbar, Button, SplitButton, Dropdown, Badge,\n   Modal} from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes, faShoppingCart, faCheck } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    const { cookies } = props;\n\n    document.title = 'KocoShop';\n\n    let testId = cookies.get('testId')? cookies.get('testId') : \"1\";\n    let curSetting = cookies.get('username')? cookies.get('username') : \"\";\n    \n    let targetCategory = \"Luggage\"\n    let targetProductId = \"B06ZYHM4JY\"\n    let controlProductId = \"B00BMJSJG0\"\n    let captchaType = \"YouCaptcha\"\n    if(testId == \"1\"){\n      targetCategory = \"Luggage\"\n      targetProductId = \"B06ZYHM4JY\"\n      controlProductId = \"B00BMJSJG0\"\n      captchaType = \"YouCaptcha\"\n    }\n    if(testId == \"2\"){\n      targetCategory = \"Electronics\"\n      targetProductId = \"B015CH1PJU\"\n      controlProductId = \"B079GXWSWG\"\n      captchaType = \"ReCaptcha\"\n    }\n    if(testId == \"3\"){\n      targetCategory = \"Men's Fashion\"\n      targetProductId = \"B07M9QXCP7\"\n      controlProductId = \"B07HXZH7WD\"\n      captchaType = \"textCaptcha\"\n    }\n\n    let captchaIdList = productIdToCaptchaId[targetProductId]\n    let captchaId = captchaIdList[Math.floor(Math.random() *captchaIdList.length)];\n\n    this.state = {\n      navbarToggle: false,\n      showCategoryNav: true,\n      showLogin: false,\n      captchaVerified: false,\n      targetCategory,\n      targetProductId,\n      controlProductId,\n      captchaId,\n      captchaIdList,\n      captcha: \"\",\n      username: cookies.get('username')? cookies.get('username') : \"\",\n      password: \"\",\n      usernameValid: true,\n      passwordValid: true,\n      userLogin: cookies.get('username')? cookies.get('username') != \"\" ? true: false: false,\n      productsInCart: cookies.get('products')? cookies.get('products') : [],\n      showProductDetail: false,\n      curProduct: null,\n      showSuccessDialog: -1,\n      captchaType,\n      redirect: cookies.get('username')? cookies.get('username') != \"\" ? false: true: true,\n      showAd: false,\n      wrongPassword: false,\n      testId\n    };\n    this.handlePasswordChange = this.handlePasswordChange.bind(this);\n    this.handleUserNameChange = this.handleUserNameChange.bind(this);\n    this.handleNavbarToggle = this.handleNavbarToggle.bind(this);\n    this.closeDialog = this.closeDialog.bind(this)\n    this.userLogin = this.userLogin.bind(this);\n    this.userLogout = this.userLogout.bind(this);\n    this.result = this.result.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.closeProductDetailDialog = this.closeProductDetailDialog.bind(this);\n    this.showProduct = this.showProduct.bind(this);\n    this.toggleCategoryNav = this.toggleCategoryNav.bind(this);\n    this.addBrowsedProducts = this.addBrowsedProducts.bind(this);\n    this.nextTest = this.nextTest.bind(this);\n    this.captchaSuccess = this.captchaSuccess.bind(this);\n    this.updateCart = this.updateCart.bind(this);\n    this.showAd = this.showAd.bind(this);\n    this.closeAd = this.closeAd.bind(this);\n    this.showDialog = this.showDialog.bind(this);\n    this.validateAccount = this.validateAccount.bind(this);\n  }\n\n  componentDidMount() {\n    if(!this.state.userLogin){\n      this.setState({\n        showLogin: true\n      })\n    }\n  }\n\n  render (){\n    const targetProductData = flatData[this.state.targetProductId]\n    return (\n      <div>\n        <Alert variant=\"success\" className=\"shadow-sm fadeOut\" style={{position: \"fixed\", width: \"40%\", left: \"30%\", zIndex: \"1200\", textAlign: \"center\", display: this.state.showSuccessDialog > 0? \"block\" : \"none\"}}>\n          <FontAwesomeIcon className=\"mx-2\" icon={faCheck}/>\n          已將<span className=\"mx-1\">{this.state.showSuccessDialog}</span>件商品加入購物車\n        </Alert>\n        <LoginModal showLogin={this.state.showLogin} closeDialog={this.closeDialog} showDialog={this.showDialog} \n          captchaVerified={this.state.captchaVerified} username={this.state.username} password={this.state.password}\n          handleUserNameChange={this.handleUserNameChange} handlePasswordChange={this.handlePasswordChange}\n          usernameValid={this.state.usernameValid} passwordValid={this.state.passwordValid}\n          captchaType={this.state.captchaType} result={this.result} handleClick={this.handleClick}\n          captcha={this.state.captcha} captchaId={this.state.captchaId} captchaSuccess={this.captchaSuccess}\n          captchaIdList={this.state.captchaIdList} userLogin={this.userLogin} wrongPassword={this.state.wrongPassword}\n          />\n          <Modal dialogClassName=\"\" show={this.state.showAd} onHide={this.closeAd} centered>\n            <Modal.Header closeButton>\n            <Modal.Title>\n              \n            </Modal.Title>\n          </Modal.Header>\n            <Modal.Body className=\"d-flex flex-column\" style={{ overflowY: 'auto', height: \"400px\"}}>\n              <div className=\"d-flex justify-content-center align-items-center my-2\" style={{height: \"240px\"}}>\n                <div className=\"d-flex justify-content-center\" style={{maxHeight:\"240px\", maxWidth:\"240px\", overflow: \"hidden\"}}>\n                  <img src={targetProductData.url} style={{maxWidth: \"240px\", maxHeight:\"240px\", width: \"auto\", height: \"auto\"}} />\n                </div>\n              </div>\n              <div>\n                <h4>{targetProductData.name}</h4>\n                <div className=\"d-flex flex-row justify-content-center mt-3 mb-1\">\n                  <Button size=\"lg\" className=\"mx-2 w-25\" href={\"http://localhost:3000/Product?p=\" + decodeURIComponent(targetProductData.url).split(\"/\").pop().substr(0,10)}>去看看</Button>\n                  <Button size=\"lg\" className=\"mx-2 w-25\" variant=\"secondary\" onClick={this.closeAd}>略過</Button>\n                </div>\n              </div>\n            </Modal.Body>\n          </Modal>\n        </div>\n    );\n  }\n\n  handleNavbarToggle() {\n    this.setState((prevState, props) => ({\n        navbarToggle: !prevState.navbarToggle\n    }));\n  }\n\n  clearCart(index = null) {\n    const { cookies } = this.props;\n    console.log(index)\n    if (index == null){\n      this.setState({\n        productsInCart: []\n      }, ()=>{\n        cookies.set('products', JSON.stringify(this.state.productsInCart))\n      })\n    }\n    else {\n      let productsInCart = cookies.get('products')? cookies.get('products') : [];\n      productsInCart.splice(index, 1)\n      this.setState({\n        productsInCart\n      }, ()=>{\n        cookies.set('products', JSON.stringify(this.state.productsInCart))\n      })\n    }\n  }\n\n  updateCart() {\n    const { cookies } = this.props;\n    let productsInCart = cookies.get('products')? cookies.get('products') : [];\n    this.setState({\n      productsInCart\n    });\n  }\n\n  showDialog() {\n    this.setState({\n      showLogin: true\n    })\n  }\n\n  closeDialog() {\n    this.setState({\n      showLogin: false,\n      captchaVerified: false,\n      usernameValid: true,\n      passwordValid: true,\n      username: \"\",\n      password: \"\"\n    },()=>{\n      // if(this.state.userLogin){\n      //   window.location.href = this.state.targetCategory;\n      // }\n    })\n  }\n\n  showProduct(product) {\n    console.log(product)\n    if(!product){\n      product = {\n        \"id\": \"\"\n      }\n    }\n    this.setState({\n      curProduct: product,\n      showProductDetail: true\n    })\n\n  }\n\n  addBrowsedProducts() {\n\n  }\n\n  nextTest() {\n    const { cookies } = this.props;\n    this.userLogout()\n    let testId = cookies.get('testId')? cookies.get('testId') : \"1\";\n    if(testId == \"1\"){\n        testId = \"2\"\n    }\n    else if(testId == \"2\"){\n        testId = \"3\"\n    }\n    else if(testId == \"3\"){\n        testId = \"1\"\n    }\n    cookies.set('testId', testId)\n    cookies.set('browsed', [])\n    cookies.set('products', [])\n    \n    let targetCategory = \"Luggage\"\n    let targetProductId = \"B06ZYHM4JY\"\n    let controlProductId = \"B00BMJSJG0\"\n    let captchaType = \"YouCaptcha\"\n    if(testId == \"1\"){\n      targetCategory = \"Luggage\"\n      targetProductId = \"B06ZYHM4JY\"\n      controlProductId = \"B00BMJSJG0\"\n      captchaType = \"YouCaptcha\"\n    }\n    if(testId == \"2\"){\n      targetCategory = \"Electronics\"\n      targetProductId = \"B015CH1PJU\"\n      controlProductId = \"B079GXWSWG\"\n      captchaType = \"ReCaptcha\"\n    }\n    if(testId == \"3\"){\n      targetCategory = \"Men's Fashion\"\n      targetProductId = \"B07M9QXCP7\"\n      controlProductId = \"B07HXZH7WD\"\n      captchaType = \"textCaptcha\"\n    }\n\n    let captchaIdList = productIdToCaptchaId[targetProductId]\n    let captchaId = captchaIdList[Math.floor(Math.random() *captchaIdList.length)];\n\n    this.setState({\n      testId,\n      targetCategory,\n      targetProductId,\n      controlProductId,\n      captchaType,\n      captchaId,\n      captchaIdList,\n      navbarToggle: false,\n      redirect: true,\n      wrongPassword: false,\n      showLogin: true\n    })\n  }\n\n  closeProductDetailDialog() {\n    this.setState({\n      showProductDetail: false\n    })\n  }\n\n  captchaSuccess(captchaPass = false) {\n    if(this.state.username == \"\" || this.state.password == \"\"){\n      this.setState({\n        usernameValid: this.state.username == \"\"? false: true,\n        passwordValid: this.state.password == \"\"? false: true\n      })\n      return false\n    }\n    else {\n      this.setState({\n        usernameValid: true,\n        passwordValid: true,\n      })\n    }\n    if(captchaPass){\n      if(this.state.captchaType == \"YouCaptcha\"){\n        if(this.userLogin()){\n          this.setState({\n            captchaVerified: true\n          })\n        }\n      }\n      else{\n        this.setState({\n          captchaVerified: true\n        })\n      }\n    }\n    return true\n  }\n\n  userLogin() {\n    const { cookies } = this.props;\n    if(!this.validateAccount(this.state.username, this.state.password)){\n      console.log(\"not valid account\")\n      this.closeDialog()\n      this.setState({\n        wrongPassword: true\n      })\n      setTimeout(this.showDialog, 500)\n      return false\n    }\n\n    if (this.state.username != \"\"){\n      cookies.set('username', this.state.username)\n      this.setState({\n        showLogin: this.state.captchaType == \"YouCaptcha\"? true: false,\n        userLogin: true,\n        redirect: false\n      })\n      return true\n    }\n  }\n\n  userLogout() {\n    const { cookies } = this.props;\n\n    cookies.set('browsed', [])\n    cookies.set('username', \"\")\n\n    this.setState({\n      showLogin: false,\n      userLogin: false,\n      username: \"\",\n      redirect: true\n    })\n  }\n\n  handleUserNameChange(e) {\n    console.log(e);\n    const text = e.target.value\n    this.setState({\n      username: text,\n      wrongPassword: false\n    });\n  }\n\n  handlePasswordChange(e) {\n    console.log(e);\n    const text = e.target.value\n    this.setState({\n      password: text,\n      wrongPassword: false\n    });\n  }\n\n  result(text) {\n    this.setState({\n      captcha: text\n    })\n  }\n\n  handleClick(e) {\n    e.preventDefault();\n    this.captchaSuccess(true)\n  }\n\n  toggleCategoryNav() {\n    this.setState({\n      showCategoryNav: !this.state.showCategoryNav\n    })\n  }\n\n  showAd() {\n    this.setState({\n      showAd: true\n    })\n  }\n\n  closeAd(){\n    this.setState({\n      showAd: false\n    })\n  }\n\n  validateAccount(username, password) {\n    if(accountsData[username]){\n      if(accountsData[username] == password){\n        return true\n      }\n    }\n    return false\n  }\n}\n\nexport default withCookies(App)","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient, { InMemoryCache } from 'apollo-boost';\nimport { ApolloProvider, Query, Mutation, useQuery } from 'react-apollo';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst client = new ApolloClient({\n  uri: 'http://140.114.85.27:4000',\n});\n\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}